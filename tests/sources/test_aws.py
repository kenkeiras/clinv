from clinv.sources.aws import Route53src, RDSsrc
from dateutil.tz import tzutc
from unittest.mock import patch, call, PropertyMock
from tests.sources import ClinvSourceBaseTestClass
import datetime
import unittest


class AWSSourceBaseTestClass(ClinvSourceBaseTestClass):
    '''
    Abstract Base class to ensure that all the AWS sources have the same
    interface.

    Must be combined with a unittest.TestCase that defines:
        * self.class_obj the name of the source class to test
    '''

    def setUp(self):
        super().setUp()

    def tearDown(self):
        super().tearDown()

    def test_get_regions(self):
        self.boto.client.return_value.describe_regions.return_value = {
            'Regions': [
                {
                    'RegionName': 'us-east-1'
                },
                {
                    'RegionName': 'eu-west-1'
                },
            ]
        }
        self.assertEqual(self.src.regions, ['us-east-1', 'eu-west-1'])


class TestRDSSource(AWSSourceBaseTestClass, unittest.TestCase):
    '''
    Test the RDS implementation in the inventory.
    '''

    def setUp(self):
        super().setUp()
        self.class_obj = RDSsrc

        # Initialize object to test
        source_data = {}
        user_data = {}
        self.src = self.class_obj(source_data, user_data)

        # Expected source_data dictionary generated by generate_source_data
        self.src.source_data = {
            'us-east-1': [
                {
                    'AllocatedStorage': 100,
                    'AssociatedRoles': [],
                    'AutoMinorVersionUpgrade': True,
                    'AvailabilityZone': 'us-east-1a',
                    'BackupRetentionPeriod': 7,
                    'CACertificateIdentifier': 'rds-ca-2015',
                    'DBInstanceArn': 'arn:aws:rds:us-east-1:224119285:db:db',
                    'DBInstanceClass': 'db.t2.micro',
                    'DBInstanceIdentifier': 'rds-name',
                    'DBInstanceStatus': 'available',
                    'DBSecurityGroups': [],
                    'DBSubnetGroup': {
                        'DBSubnetGroupDescription': 'Created from the RDS '
                        'Management Console',
                        'DBSubnetGroupName': 'default-vpc-v2dcp2jh',
                        'SubnetGroupStatus': 'Complete',
                        'Subnets': [
                            {
                                'SubnetAvailabilityZone': {
                                    'Name': 'us-east-1a'
                                },
                                'SubnetIdentifier': 'subnet-42sfl222',
                                'SubnetStatus': 'Active'
                            },
                            {
                                'SubnetAvailabilityZone': {
                                    'Name': 'us-east-1e'
                                },
                                'SubnetIdentifier': 'subnet-42sfl221',
                                'SubnetStatus': 'Active'
                            },
                        ],
                        'VpcId': 'vpc-v2dcp2jh'},
                    'DbiResourceId': 'db-YDFL2',
                    'DeletionProtection': True,
                    'Endpoint': {
                        'Address': 'rds-name.us-east-1.rds.amazonaws.com',
                        'HostedZoneId': '202FGHSL2JKCFW',
                        'Port': 5521
                    },
                    'Engine': 'mariadb',
                    'EngineVersion': '1.2',
                    'InstanceCreateTime': datetime.datetime(
                        2019, 6, 17, 15, 15, 8, 461000, tzinfo=tzutc()
                    ),
                    'Iops': 1000,
                    'LatestRestorableTime': datetime.datetime(
                        2019, 7, 8, 6, 23, 55, tzinfo=tzutc()
                    ),
                    'MasterUsername': 'root',
                    'MultiAZ': True,
                    'PreferredBackupWindow': '03:00-04:00',
                    'PreferredMaintenanceWindow': 'fri:04:00-fri:05:00',
                    'PubliclyAccessible': False,
                    'StorageEncrypted': True,
                },
            ],
        }

    def tearDown(self):
        super().tearDown()

    @patch('clinv.sources.aws.RDSsrc.regions', new_callable=PropertyMock)
    def test_generate_source_data_creates_expected_source_data_attrib(
        self,
        regionsMock
    ):
        regionsMock.return_value = ['us-east-1']
        self.boto.client.return_value.describe_db_instances.return_value = {
            'DBInstances': [
                {
                    'AllocatedStorage': 100,
                    'AssociatedRoles': [],
                    'AutoMinorVersionUpgrade': True,
                    'AvailabilityZone': 'us-east-1a',
                    'BackupRetentionPeriod': 7,
                    'CACertificateIdentifier': 'rds-ca-2015',
                    'CopyTagsToSnapshot': True,
                    'DBInstanceArn': 'arn:aws:rds:us-east-1:224119285:db:db',
                    'DBInstanceClass': 'db.t2.micro',
                    'DBInstanceIdentifier': 'rds-name',
                    'DBInstanceStatus': 'available',
                    'DBParameterGroups': [
                        {
                            'DBParameterGroupName': 'default.postgres11',
                            'ParameterApplyStatus': 'in-sync'
                        }
                    ],
                    'DBSecurityGroups': [],
                    'DBSubnetGroup': {
                        'DBSubnetGroupDescription': 'Created from the RDS '
                        'Management Console',
                        'DBSubnetGroupName': 'default-vpc-v2dcp2jh',
                        'SubnetGroupStatus': 'Complete',
                        'Subnets': [
                            {
                                'SubnetAvailabilityZone': {
                                    'Name': 'us-east-1a'
                                },
                                'SubnetIdentifier': 'subnet-42sfl222',
                                'SubnetStatus': 'Active'
                            },
                            {
                                'SubnetAvailabilityZone': {
                                    'Name': 'us-east-1e'
                                },
                                'SubnetIdentifier': 'subnet-42sfl221',
                                'SubnetStatus': 'Active'
                            },
                        ],
                        'VpcId': 'vpc-v2dcp2jh'},
                    'DbInstancePort': 0,
                    'DbiResourceId': 'db-YDFL2',
                    'DeletionProtection': True,
                    'DomainMemberships': [],
                    'Endpoint': {
                        'Address': 'rds-name.us-east-1.rds.amazonaws.com',
                        'HostedZoneId': '202FGHSL2JKCFW',
                        'Port': 5521
                    },
                    'Engine': 'mariadb',
                    'EngineVersion': '1.2',
                    'EnhancedMonitoringResourceArn': 'logs-arn',
                    'IAMDatabaseAuthenticationEnabled': False,
                    'InstanceCreateTime': datetime.datetime(
                        2019, 6, 17, 15, 15, 8, 461000, tzinfo=tzutc()
                    ),
                    'Iops': 1000,
                    'LatestRestorableTime': datetime.datetime(
                        2019, 7, 8, 6, 23, 55, tzinfo=tzutc()
                    ),
                    'LicenseModel': 'mariadb-license',
                    'MasterUsername': 'root',
                    'MonitoringInterval': 60,
                    'MonitoringRoleArn': 'monitoring-arn',
                    'MultiAZ': True,
                    'OptionGroupMemberships': [
                        {
                            'OptionGroupName': 'default:mariadb-1',
                            'Status': 'in-sync'
                        }
                    ],
                    'PendingModifiedValues': {},
                    'PerformanceInsightsEnabled': True,
                    'PerformanceInsightsKMSKeyId': 'performance-arn',
                    'PerformanceInsightsRetentionPeriod': 7,
                    'PreferredBackupWindow': '03:00-04:00',
                    'PreferredMaintenanceWindow': 'fri:04:00-fri:05:00',
                    'PubliclyAccessible': False,
                    'ReadReplicaDBInstanceIdentifiers': [],
                    'StorageEncrypted': True,
                    'StorageType': 'io1',
                    'VpcSecurityGroups': [
                        {
                            'Status': 'active',
                            'VpcSecurityGroupId': 'sg-f23le20g'
                        },
                    ],
                },
            ],
        }

        expected_source_data = {
            'us-east-1': [
                {
                    'AllocatedStorage': 100,
                    'AssociatedRoles': [],
                    'AutoMinorVersionUpgrade': True,
                    'AvailabilityZone': 'us-east-1a',
                    'BackupRetentionPeriod': 7,
                    'CACertificateIdentifier': 'rds-ca-2015',
                    'DBInstanceArn': 'arn:aws:rds:us-east-1:224119285:db:db',
                    'DBInstanceClass': 'db.t2.micro',
                    'DBInstanceIdentifier': 'rds-name',
                    'DBInstanceStatus': 'available',
                    'DBSecurityGroups': [],
                    'DBSubnetGroup': {
                        'DBSubnetGroupDescription': 'Created from the RDS '
                        'Management Console',
                        'DBSubnetGroupName': 'default-vpc-v2dcp2jh',
                        'SubnetGroupStatus': 'Complete',
                        'Subnets': [
                            {
                                'SubnetAvailabilityZone': {
                                    'Name': 'us-east-1a'
                                },
                                'SubnetIdentifier': 'subnet-42sfl222',
                                'SubnetStatus': 'Active'
                            },
                            {
                                'SubnetAvailabilityZone': {
                                    'Name': 'us-east-1e'
                                },
                                'SubnetIdentifier': 'subnet-42sfl221',
                                'SubnetStatus': 'Active'
                            },
                        ],
                        'VpcId': 'vpc-v2dcp2jh'},
                    'DbiResourceId': 'db-YDFL2',
                    'DeletionProtection': True,
                    'Endpoint': {
                        'Address': 'rds-name.us-east-1.rds.amazonaws.com',
                        'HostedZoneId': '202FGHSL2JKCFW',
                        'Port': 5521
                    },
                    'Engine': 'mariadb',
                    'EngineVersion': '1.2',
                    'InstanceCreateTime': datetime.datetime(
                        2019, 6, 17, 15, 15, 8, 461000, tzinfo=tzutc()
                    ),
                    'Iops': 1000,
                    'LatestRestorableTime': datetime.datetime(
                        2019, 7, 8, 6, 23, 55, tzinfo=tzutc()
                    ),
                    'MasterUsername': 'root',
                    'MultiAZ': True,
                    'PreferredBackupWindow': '03:00-04:00',
                    'PreferredMaintenanceWindow': 'fri:04:00-fri:05:00',
                    'PubliclyAccessible': False,
                    'StorageEncrypted': True,
                },
            ],
        }

        generated_source_data = self.src.generate_source_data()
        self.assertEqual(
            self.src.source_data,
            expected_source_data,
        )
        self.assertEqual(
            generated_source_data,
            expected_source_data,
        )

    def test_generate_user_data_creates_empty_user_data_if_no_src_data(self):
        self.src.source_data = {'us-east-1': {}}
        self.src.generate_user_data()
        self.assertEqual(self.src.user_data, {})

    def test_generate_user_data_adds_desired_default_user_data(self):
        self.src.generate_user_data()

        desired_default_user_data = {
            'db-YDFL2': {
                'description': '',
                'to_destroy': 'tbd',
                'environment': 'tbd',
                'region': 'us-east-1',
            },
        }
        self.assertEqual(
            self.src.user_data,
            desired_default_user_data,
        )

    def test_generate_user_data_returns_expected_dictionary(self):
        self.assertEqual(
            self.src.generate_user_data(),
            self.src.user_data,
        )

    def test_generate_inventory_return_empty_dict_if_no_data(self):
        self.src.source_data = {'hosted_zones': {}}
        self.assertEqual(self.src.generate_inventory(), {})

    @patch('clinv.sources.aws.RDS')
    def test_generate_inventory_creates_expected_dictionary(
        self,
        resource_mock
    ):
        resource_id = 'db-YDFL2'
        self.src.user_data = {
            'db-YDFL2': {
                'description': 'tbd',
                'to_destroy': 'tbd',
                'environment': 'tbd',
                'region': 'us-east-1',
            },
        }

        desired_mock_input = {
            **self.src.user_data['db-YDFL2'],
            **self.src.source_data['us-east-1'][0],
        }

        desired_inventory = self.src.generate_inventory()
        self.assertEqual(
            resource_mock.assert_called_with(
                {
                    resource_id: desired_mock_input
                },
            ),
            None,
        )

        self.assertEqual(
            desired_inventory,
            {
                resource_id: resource_mock.return_value
            },
        )


class TestRoute53Source(AWSSourceBaseTestClass, unittest.TestCase):
    '''
    Test the Route53 implementation in the inventory.
    '''

    def setUp(self):
        super().setUp()
        self.class_obj = Route53src

        # Initialize object to test
        source_data = {}
        user_data = {}
        self.src = self.class_obj(source_data, user_data)

        # Expected source_data dictionary generated by generate_source_data
        self.src.source_data = {
            'hosted_zones': [
                {
                    'Config': {
                        'Comment': 'This is the description',
                        'PrivateZone': False,
                    },
                    'Id': '/hostedzone/hosted_zone_id',
                    'Name': 'hostedzone.org',
                    'ResourceRecordSetCount': 1,
                    'records': [
                        {
                            'Name': 'record1.clinv.org',
                            'ResourceRecords': [
                                {
                                    'Value': '127.0.0.1'
                                },
                                {
                                    'Value': 'localhost'
                                },
                            ],
                            'TTL': 172800,
                            'Type': 'CNAME'
                        },
                    ],
                },
            ],
        }

    def tearDown(self):
        super().tearDown()

    def test_generate_user_data_creates_empty_user_data_if_no_src_data(self):
        self.src.source_data = {'hosted_zones': {}}
        self.src.generate_user_data()
        self.assertEqual(self.src.user_data, {})

    def test_generate_user_data_adds_desired_default_user_data(self):
        self.src.generate_user_data()

        desired_default_user_data = {
            'hosted_zone_id-record1.clinv.org-cname': {
                'description': 'tbd',
                'to_destroy': 'tbd',
                'state': 'active',
            },
        }
        self.assertEqual(
            self.src.user_data,
            desired_default_user_data,
        )

    def test_generate_user_data_returns_expected_dictionary(self):
        self.assertEqual(
            self.src.generate_user_data(),
            self.src.user_data,
        )

    def test_generate_inventory_return_empty_dict_if_no_data(self):
        self.src.source_data = {'hosted_zones': {}}
        self.assertEqual(self.src.generate_inventory(), {})

    @patch('clinv.sources.aws.Route53')
    def test_generate_inventory_creates_expected_dictionary(
        self,
        resource_mock
    ):
        resource_id = 'hosted_zone_id-record1.clinv.org-cname'
        desired_mock_input = {
            'Name': 'record1.clinv.org',
            'ResourceRecords': [
                {
                    'Value': '127.0.0.1'
                },
                {
                    'Value': 'localhost'
                },
            ],
            'TTL': 172800,
            'Type': 'CNAME',
            'description': 'tbd',
            'to_destroy': 'tbd',
            'hosted_zone': {
                'id': '/hostedzone/hosted_zone_id',
                'private': False,
                'name': 'hostedzone.org',
            },
            'state': 'active',
        }
        self.src.user_data = {
            'hosted_zone_id-record1.clinv.org-cname': {
                'description': 'tbd',
                'to_destroy': 'tbd',
                'state': 'active',
            },
        }
        desired_inventory = self.src.generate_inventory()
        self.assertEqual(
            resource_mock.assert_called_with(
                {
                    resource_id: desired_mock_input
                },
            ),
            None,
        )

        self.assertEqual(
            desired_inventory,
            {
                resource_id: resource_mock.return_value
            },
        )


class TestRoute53SourceFetch(AWSSourceBaseTestClass, unittest.TestCase):
    '''
    Extend AWSBaseTewstClass to test the Route53 fetch implementation in the
    inventory.
    '''

    def setUp(self):
        super().setUp()
        self.class_obj = Route53src

        # Initialize object to test
        source_data = {}
        user_data = {}
        self.src = Route53src(source_data, user_data)

        self.boto_client = self.boto.client.return_value

        # Expected boto call to get the hosted zones
        self.boto_client.list_hosted_zones.return_value = {
            'HostedZones': [
                {
                    'CallerReference': 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX',
                    'Config': {
                        'Comment': 'This is the description',
                        'PrivateZone': False,
                    },
                    'Id': '/hostedzone/hosted_zone_id',
                    'Name': 'hostedzone.org',
                    'ResourceRecordSetCount': 1
                },
            ],
            'IsTruncated': False,
            'MaxItems': '100',
            'ResponseMetadata': {
                'HTTPHeaders': {
                    'content-length': '4211',
                    'content-type': 'text/xml',
                    'date': 'Mon, 15 Jul 2019 13:13:51 GMT',
                    'vary': 'accept-encoding',
                    'x-amzn-requestid': 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'
                },
                'HTTPStatusCode': 200,
                'RequestId': 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx',
                'RetryAttempts': 0,
            },
        }

    def tearDown(self):
        super().tearDown()

    def test_generate_source_data_creates_expected_source_data_attrib(self):
        # Expected boto call to get the resources of a hosted zone
        self.boto_client.list_resource_record_sets.return_value = {
            'IsTruncated': False,
            'MaxItems': '100',
            'ResourceRecordSets': [
                {
                    'Name': 'record1.clinv.org.',
                    'ResourceRecords': [
                        {
                            'Value': '127.0.0.1'
                        },
                        {
                            'Value': 'localhost'
                        },
                    ],
                    'TTL': 172800,
                    'Type': 'CNAME'
                },
            ],
            'ResponseMetadata': {
                'HTTPHeaders': {
                    'content-length': '20952',
                    'content-type': 'text/xml',
                    'date': 'Mon, 15 Jul 2019 13:20:58 GMT',
                    'vary': 'accept-encoding',
                    'x-amzn-requestid': 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'
                },
                'HTTPStatusCode': 200,
                'RequestId': 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx',
                'RetryAttempts': 0
            }
        }

        expected_source_data = {
            'hosted_zones': [
                {
                    'Config': {
                        'Comment': 'This is the description',
                        'PrivateZone': False,
                    },
                    'Id': '/hostedzone/hosted_zone_id',
                    'Name': 'hostedzone.org',
                    'ResourceRecordSetCount': 1,
                    'records': [
                        {
                            'Name': 'record1.clinv.org.',
                            'ResourceRecords': [
                                {
                                    'Value': '127.0.0.1'
                                },
                                {
                                    'Value': 'localhost'
                                },
                            ],
                            'TTL': 172800,
                            'Type': 'CNAME'
                        },
                    ],
                },
            ],
        }

        generated_source_data = self.src.generate_source_data()
        self.assertEqual(
            self.src.source_data,
            expected_source_data,
        )
        self.assertEqual(
            generated_source_data,
            expected_source_data,
        )

    def test_generate_source_data_supports_pagination_on_resources(self):
        self.src.source_data = {'route53': {}}

        expected_first_list_resource_record_sets = {
            'IsTruncated': True,
            'NextRecordName': 'record2.clinv.org',
            'NextRecordType': 'CNAME',
            'MaxItems': '100',
            'ResourceRecordSets': [
                {
                    'Name': 'record1.clinv.org',
                    'ResourceRecords': [
                        {
                            'Value': '127.0.0.1'
                        },
                        {
                            'Value': 'localhost'
                        },
                    ],
                    'TTL': 172800,
                    'Type': 'CNAME'
                },
            ],
            'ResponseMetadata': {
                'HTTPHeaders': {
                    'content-length': '20952',
                    'content-type': 'text/xml',
                    'date': 'Mon, 15 Jul 2019 13:20:58 GMT',
                    'vary': 'accept-encoding',
                    'x-amzn-requestid': 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'
                },
                'HTTPStatusCode': 200,
                'RequestId': 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx',
                'RetryAttempts': 0
            }
        }
        expected_second_list_resource_record_sets = {
            'IsTruncated': False,
            'MaxItems': '100',
            'ResourceRecordSets': [
                {
                    'Name': 'record2.clinv.org',
                    'ResourceRecords': [
                        {
                            'Value': '127.0.0.1'
                        },
                        {
                            'Value': 'localhost'
                        },
                    ],
                    'TTL': 172800,
                    'Type': 'CNAME'
                },
            ],
            'ResponseMetadata': {
                'HTTPHeaders': {
                    'content-length': '20952',
                    'content-type': 'text/xml',
                    'date': 'Mon, 15 Jul 2019 13:20:58 GMT',
                    'vary': 'accept-encoding',
                    'x-amzn-requestid': 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'
                },
                'HTTPStatusCode': 200,
                'RequestId': 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx',
                'RetryAttempts': 0
            }
        }

        self.boto.client.return_value.list_resource_record_sets.side_effect = [
                expected_first_list_resource_record_sets,
                expected_second_list_resource_record_sets,
        ]

        expected_source_data = {
            'hosted_zones': [
                {
                    'Config': {
                        'Comment': 'This is the description',
                        'PrivateZone': False,
                    },
                    'Id': '/hostedzone/hosted_zone_id',
                    'Name': 'hostedzone.org',
                    'ResourceRecordSetCount': 1,
                    'records': [
                        {
                            'Name': 'record1.clinv.org',
                            'ResourceRecords': [
                                {
                                    'Value': '127.0.0.1'
                                },
                                {
                                    'Value': 'localhost'
                                },
                            ],
                            'TTL': 172800,
                            'Type': 'CNAME'
                        },
                        {
                            'Name': 'record2.clinv.org',
                            'ResourceRecords': [
                                {
                                    'Value': '127.0.0.1'
                                },
                                {
                                    'Value': 'localhost'
                                },
                            ],
                            'TTL': 172800,
                            'Type': 'CNAME'
                        },
                    ],
                },
            ],
        }

        self.src.generate_source_data()
        self.assertEqual(
            self.src.source_data,
            expected_source_data,
        )

        self.assertEqual(
            self.boto.client.return_value.list_resource_record_sets.mock_calls,
            [
                call(HostedZoneId='/hostedzone/hosted_zone_id'),
                call(
                    HostedZoneId='/hostedzone/hosted_zone_id',
                    StartRecordName='record2.clinv.org',
                    StartRecordType='CNAME'
                )
            ]
        )
